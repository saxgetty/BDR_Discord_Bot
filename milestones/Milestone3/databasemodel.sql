-- MySQL Script generated by MySQL Workbench
-- Mon Nov  1 23:25:09 2021
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema blogManagementDB
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `blogManagementDB` ;

-- -----------------------------------------------------
-- Schema blogManagementDB
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `blogManagementDB` DEFAULT CHARACTER SET utf8 ;
USE `blogManagementDB` ;

-- -----------------------------------------------------
-- Table `blogManagementDB`.`Product`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Product` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Product` (
  `product_id` INT(12) NOT NULL,
  `date_created` DATE NOT NULL,
  `full_name` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`product_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Demographic`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Demographic` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Demographic` (
  `demographic_id` INT(12) NOT NULL,
  `age` INT(9) NOT NULL,
  `gender` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`demographic_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Technology`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Technology` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Technology` (
  `technology_id` INT(12) NOT NULL,
  `age` INT(9) NOT NULL,
  `type` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`technology_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Friends`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Friends` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Friends` (
  `friends_id` INT(12) NOT NULL,
  `age` INT(9) NOT NULL,
  `full_name` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`friends_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`News`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`News` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`News` (
  `news_id` INT(12) NOT NULL,
  `title` VARCHAR(100) NOT NULL,
  `body` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`news_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Post`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Post` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Post` (
  `post_id` INT(20) NOT NULL,
  `subject` VARCHAR(100) NOT NULL,
  `body` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`post_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Blog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Blog` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Blog` (
  `blog_id` INT(20) NOT NULL,
  `date_created` DATE NOT NULL,
  `blog_name` VARCHAR(120) NOT NULL,
  PRIMARY KEY (`blog_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Look Up`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Look Up` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Look Up` (
  `look_up_id` INT(12) NOT NULL,
  `count` INT(12) NOT NULL,
  `type` VARCHAR(55) NOT NULL,
  PRIMARY KEY (`look_up_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`URL`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`URL` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`URL` (
  `url_id` INT(12) NOT NULL,
  `type` VARCHAR(55) NOT NULL,
  `link` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`url_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Category` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Category` (
  `category_id` INT(12) NOT NULL,
  `count` INT(12) NOT NULL,
  `type` VARCHAR(55) NOT NULL,
  PRIMARY KEY (`category_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Server`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Server` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Server` (
  `server_id` INT(12) NOT NULL,
  `name` VARCHAR(55) NOT NULL,
  `location` VARCHAR(55) NOT NULL,
  PRIMARY KEY (`server_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Host`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Host` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Host` (
  `host_id` INT(12) NOT NULL,
  `port` INT(9) NOT NULL,
  `name` VARCHAR(55) NOT NULL,
  PRIMARY KEY (`host_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Administrator`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Administrator` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Administrator` (
  `administrator_id` INT(12) NOT NULL,
  `tier` INT(9) NOT NULL,
  `full_name` VARCHAR(80) NOT NULL,
  PRIMARY KEY (`administrator_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Users`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Users` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Users` (
  `users_id` INT(12) NOT NULL,
  `first_name` VARCHAR(55) NOT NULL,
  `last_name` VARCHAR(55) NOT NULL,
  PRIMARY KEY (`users_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Advertisements`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Advertisements` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Advertisements` (
  `advertisements_id` INT(12) NOT NULL,
  `title` VARCHAR(100) NOT NULL,
  `body` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`advertisements_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`User Ticket File`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`User Ticket File` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`User Ticket File` (
  `user_ticket_file_id` INT(12) NOT NULL,
  `date_created` DATE NOT NULL,
  `description` VARCHAR(55) NOT NULL,
  PRIMARY KEY (`user_ticket_file_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Account`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Account` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Account` (
  `account_id` INT(12) NOT NULL,
  `username` VARCHAR(55) NOT NULL,
  `password` VARCHAR(55) NOT NULL,
  `users_id` INT(12) NOT NULL,
  PRIMARY KEY (`account_id`, `users_id`),
  INDEX `ACCOUNT_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  CONSTRAINT `ACCOUNT_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`General Free User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`General Free User` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`General Free User` (
  `general_free_user_id` INT(12) NOT NULL,
  `subscription_length` INT(9) NOT NULL,
  `num_months_subscribed` INT(9) NOT NULL,
  `account_id` INT(12) NOT NULL,
  PRIMARY KEY (`general_free_user_id`, `account_id`),
  INDEX `GEN_FREE_ACCOUNT_FK_idx` (`account_id` ASC) VISIBLE,
  CONSTRAINT `GEN_FREE_ACCOUNT_FK`
    FOREIGN KEY (`account_id`)
    REFERENCES `blogManagementDB`.`Account` (`account_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Options`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Options` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Options` (
  `options_id` INT(12) NOT NULL,
  `mode` VARCHAR(45) NOT NULL,
  `theme` VARCHAR(45) NOT NULL,
  `account_id` INT(12) NOT NULL,
  PRIMARY KEY (`options_id`, `account_id`),
  INDEX `OPTIONS_ACCOUNT_FK_idx` (`account_id` ASC) VISIBLE,
  CONSTRAINT `OPTIONS_ACCOUNT_FK`
    FOREIGN KEY (`account_id`)
    REFERENCES `blogManagementDB`.`Account` (`account_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`General Paid User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`General Paid User` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`General Paid User` (
  `general_paid_user_id` INT(12) NOT NULL,
  `subscription_length` INT(9) NOT NULL,
  `num_months_subscribed` INT(9) NOT NULL,
  `account_id` INT(12) NOT NULL,
  PRIMARY KEY (`general_paid_user_id`, `account_id`),
  INDEX `account_id_idx` (`account_id` ASC) VISIBLE,
  CONSTRAINT `GEN_PAID_ACCOUNT_FK`
    FOREIGN KEY (`account_id`)
    REFERENCES `blogManagementDB`.`Account` (`account_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Blog Paid User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Blog Paid User` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Blog Paid User` (
  `blog_paid_user_id` INT(12) NOT NULL,
  `subscription_length` INT(9) NOT NULL,
  `num_months_subscribed` INT(9) NOT NULL,
  `account_id` INT(12) NOT NULL,
  PRIMARY KEY (`blog_paid_user_id`, `account_id`),
  INDEX `BLOG_PAID_ACCOUNT_FK_idx` (`account_id` ASC) VISIBLE,
  CONSTRAINT `BLOG_PAID_ACCOUNT_FK`
    FOREIGN KEY (`account_id`)
    REFERENCES `blogManagementDB`.`Account` (`account_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Blog Free User`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Blog Free User` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Blog Free User` (
  `blog_free_user_id` INT(12) NOT NULL,
  `subscription_length` INT(9) NOT NULL,
  `num_months_subscribed` INT(9) NOT NULL,
  `account_id` INT(12) NOT NULL,
  PRIMARY KEY (`blog_free_user_id`, `account_id`),
  INDEX `BLOG_FREE_ACCOUNT_FK_idx` (`account_id` ASC) VISIBLE,
  CONSTRAINT `BLOG_FREE_ACCOUNT_FK`
    FOREIGN KEY (`account_id`)
    REFERENCES `blogManagementDB`.`Account` (`account_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Phone`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Phone` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Phone` (
  `phone_id` INT(12) NOT NULL,
  `make` VARCHAR(55) NOT NULL,
  `model` VARCHAR(55) NOT NULL,
  `technology_id` INT(12) NOT NULL,
  PRIMARY KEY (`phone_id`, `technology_id`),
  INDEX `TECHNOLOGY_PHONE_FK_idx` (`technology_id` ASC) VISIBLE,
  CONSTRAINT `TECHNOLOGY_PHONE_FK`
    FOREIGN KEY (`technology_id`)
    REFERENCES `blogManagementDB`.`Technology` (`technology_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Computer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Computer` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Computer` (
  `computer_id` INT(12) NOT NULL,
  `make` VARCHAR(55) NOT NULL,
  `model` VARCHAR(55) NOT NULL,
  `technology_id` INT(12) NOT NULL,
  PRIMARY KEY (`computer_id`, `technology_id`),
  INDEX `TECHNOLOGY_COMPUTER_FK_idx` (`technology_id` ASC) VISIBLE,
  CONSTRAINT `TECHNOLOGY_COMPUTER_FK`
    FOREIGN KEY (`technology_id`)
    REFERENCES `blogManagementDB`.`Technology` (`technology_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Tablet`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Tablet` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Tablet` (
  `tablet_id` INT(12) NOT NULL,
  `make` VARCHAR(55) NOT NULL,
  `model` VARCHAR(55) NOT NULL,
  `technology_id` INT(12) NOT NULL,
  PRIMARY KEY (`tablet_id`, `technology_id`),
  INDEX `TECHNOLOGY_TABLET_FK_idx` (`technology_id` ASC) VISIBLE,
  CONSTRAINT `TECHNOLOGY_TABLET_FK`
    FOREIGN KEY (`technology_id`)
    REFERENCES `blogManagementDB`.`Technology` (`technology_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Comment`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Comment` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Comment` (
  `comment_id` INT(12) NOT NULL,
  `date_created` DATE NOT NULL,
  `content` VARCHAR(100) NOT NULL,
  `users_id` INT(12) NOT NULL,
  PRIMARY KEY (`comment_id`, `users_id`),
  INDEX `COMMENT_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  CONSTRAINT `COMMENT_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Like`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Like` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Like` (
  `like_id` INT(12) NOT NULL,
  `count` INT(9) NOT NULL,
  `type` VARCHAR(55) NOT NULL,
  `users_id` INT(12) NOT NULL,
  PRIMARY KEY (`like_id`, `users_id`),
  INDEX `LIKE_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  CONSTRAINT `LIKE_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Connects`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Connects` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Connects` (
  `connect_id` INT(12) NOT NULL,
  `product_id` INT(12) NOT NULL,
  `url_id` INT(12) NOT NULL,
  PRIMARY KEY (`connect_id`),
  INDEX `url_id_idx` (`url_id` ASC) VISIBLE,
  INDEX `product_id1_idx` (`product_id` ASC) VISIBLE,
  CONSTRAINT `CONNECTS_PRODUCT_FK`
    FOREIGN KEY (`product_id`)
    REFERENCES `blogManagementDB`.`Product` (`product_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `CONNECTS_URL_FK`
    FOREIGN KEY (`url_id`)
    REFERENCES `blogManagementDB`.`URL` (`url_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Is Ran On`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Is Ran On` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Is Ran On` (
  `is_ran_on_id` INT(12) NOT NULL,
  `product_id` INT(12) NOT NULL,
  `technology_id` INT(12) NOT NULL,
  PRIMARY KEY (`is_ran_on_id`),
  INDEX `product_id_idx` (`product_id` ASC) VISIBLE,
  INDEX `technology_id_idx` (`technology_id` ASC) VISIBLE,
  CONSTRAINT `ISRANON_PRODUCT_FK`
    FOREIGN KEY (`product_id`)
    REFERENCES `blogManagementDB`.`Product` (`product_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ISRANON_TECHNOLOGY_FK`
    FOREIGN KEY (`technology_id`)
    REFERENCES `blogManagementDB`.`Technology` (`technology_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Streams`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Streams` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Streams` (
  `streams_id` INT(12) NOT NULL,
  `product_id` INT(12) NOT NULL,
  `host_id` INT(12) NOT NULL,
  PRIMARY KEY (`streams_id`),
  INDEX `product_id_idx` (`product_id` ASC) VISIBLE,
  INDEX `host_id_idx` (`host_id` ASC) VISIBLE,
  CONSTRAINT `STREAMS_HOST_FK`
    FOREIGN KEY (`host_id`)
    REFERENCES `blogManagementDB`.`Host` (`host_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `STREAMS_PRODUCT_FK`
    FOREIGN KEY (`product_id`)
    REFERENCES `blogManagementDB`.`Product` (`product_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Communicates`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Communicates` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Communicates` (
  `communicates_id` INT(12) NOT NULL,
  `host_id` INT(12) NOT NULL,
  `server_id` INT(12) NOT NULL,
  PRIMARY KEY (`communicates_id`),
  INDEX `server_id_idx` (`server_id` ASC) VISIBLE,
  INDEX `host_id_idx` (`host_id` ASC) VISIBLE,
  CONSTRAINT `COMMUNICATES_SERVER_FK`
    FOREIGN KEY (`server_id`)
    REFERENCES `blogManagementDB`.`Server` (`server_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `COMMUNICATES_HOST_FK`
    FOREIGN KEY (`host_id`)
    REFERENCES `blogManagementDB`.`Host` (`host_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Provides`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Provides` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Provides` (
  `provides_id` INT(12) NOT NULL,
  `product_id` INT(12) NOT NULL,
  `news_id` INT(12) NOT NULL,
  PRIMARY KEY (`provides_id`),
  INDEX `PROVIDES_PRODUCT_FK_idx` (`product_id` ASC) VISIBLE,
  INDEX `PROVIDES_NEWS_FK_idx` (`news_id` ASC) VISIBLE,
  CONSTRAINT `PROVIDES_PRODUCT_FK`
    FOREIGN KEY (`product_id`)
    REFERENCES `blogManagementDB`.`Product` (`product_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `PROVIDES_NEWS_FK`
    FOREIGN KEY (`news_id`)
    REFERENCES `blogManagementDB`.`News` (`news_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Manages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Manages` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Manages` (
  `manages_id` INT(12) NOT NULL,
  `product_id` INT(12) NOT NULL,
  `administrator_id` INT(12) NOT NULL,
  PRIMARY KEY (`manages_id`),
  INDEX `MANAGES_PRODUCT_FK_idx` (`product_id` ASC) VISIBLE,
  INDEX `MANAGES_ADMINISTRATOR_FK_idx` (`administrator_id` ASC) VISIBLE,
  CONSTRAINT `MANAGES_PRODUCT_FK`
    FOREIGN KEY (`product_id`)
    REFERENCES `blogManagementDB`.`Product` (`product_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `MANAGES_ADMINISTRATOR_FK`
    FOREIGN KEY (`administrator_id`)
    REFERENCES `blogManagementDB`.`Administrator` (`administrator_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Hosts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Hosts` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Hosts` (
  `hosts_id` INT(12) NOT NULL,
  `advertisements_id` INT(12) NOT NULL,
  `administrator_id` INT(12) NOT NULL,
  PRIMARY KEY (`hosts_id`),
  INDEX `HOSTS_ADVERTISEMENTS_FK_idx` (`advertisements_id` ASC) VISIBLE,
  INDEX `HOSTS_ADMINISTRATOR_FK_idx` (`administrator_id` ASC) VISIBLE,
  CONSTRAINT `HOSTS_ADVERTISEMENTS_FK`
    FOREIGN KEY (`advertisements_id`)
    REFERENCES `blogManagementDB`.`Advertisements` (`advertisements_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `HOSTS_ADMINISTRATOR_FK`
    FOREIGN KEY (`administrator_id`)
    REFERENCES `blogManagementDB`.`Administrator` (`administrator_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Works With`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Works With` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Works With` (
  `works_with_id` INT(12) NOT NULL,
  `administrator_1_id` INT(12) NOT NULL,
  `administrator_2_id` INT(12) NOT NULL,
  PRIMARY KEY (`works_with_id`),
  INDEX `WORKSWITH_ADMINISTRATOR2_FK_idx` (`administrator_2_id` ASC) VISIBLE,
  INDEX `WORKSWITH_ADMINISTRATOR1_FK_idx` (`administrator_1_id` ASC) VISIBLE,
  CONSTRAINT `WORKSWITH_ADMINISTRATOR1_FK`
    FOREIGN KEY (`administrator_1_id`)
    REFERENCES `blogManagementDB`.`Administrator` (`administrator_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `WORKSWITH_ADMINISTRATOR2_FK`
    FOREIGN KEY (`administrator_2_id`)
    REFERENCES `blogManagementDB`.`Administrator` (`administrator_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Interacts`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Interacts` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Interacts` (
  `interacts_id` INT(12) NOT NULL,
  `product_id` INT(12) NOT NULL,
  `users_id` INT(12) NOT NULL,
  PRIMARY KEY (`interacts_id`),
  INDEX `INTERACTS_PRODUCT_FK_idx` (`product_id` ASC) VISIBLE,
  INDEX `INTERACTS_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  CONSTRAINT `INTERACTS_PRODUCT_FK`
    FOREIGN KEY (`product_id`)
    REFERENCES `blogManagementDB`.`Product` (`product_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `INTERACTS_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Permission`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Permission` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Permission` (
  `permission_id` INT(12) NOT NULL,
  `tier` INT(9) NOT NULL,
  `description` VARCHAR(55) NOT NULL,
  PRIMARY KEY (`permission_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Allows`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Allows` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Allows` (
  `allows_id` INT(12) NOT NULL,
  `users_id` INT(12) NOT NULL,
  `permission_id` INT(12) NOT NULL,
  PRIMARY KEY (`allows_id`),
  INDEX `ALLOWS_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  INDEX `ALLOWS_PERMISSION_FK_idx` (`permission_id` ASC) VISIBLE,
  CONSTRAINT `ALLOWS_PERMISSION_FK`
    FOREIGN KEY (`permission_id`)
    REFERENCES `blogManagementDB`.`Permission` (`permission_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `ALLOWS_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Shares`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Shares` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Shares` (
  `shares_id` INT(12) NOT NULL,
  `users_id` INT(12) NOT NULL,
  `friends_id` INT(12) NOT NULL,
  PRIMARY KEY (`shares_id`),
  INDEX `SHARES_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  INDEX `SHARES_FRIENDS_FK_idx` (`friends_id` ASC) VISIBLE,
  CONSTRAINT `SHARES_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `SHARES_FRIENDS_FK`
    FOREIGN KEY (`friends_id`)
    REFERENCES `blogManagementDB`.`Friends` (`friends_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Contains`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Contains` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Contains` (
  `contains_id` INT(12) NOT NULL,
  `users_id` INT(12) NOT NULL,
  `demographic_id` INT(12) NOT NULL,
  PRIMARY KEY (`contains_id`),
  INDEX `CONTAINS_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  INDEX `CONTAINS_DEMOGRAPHIC_FK_idx` (`demographic_id` ASC) VISIBLE,
  CONSTRAINT `CONTAINS_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `CONTAINS_DEMOGRAPHIC_FK`
    FOREIGN KEY (`demographic_id`)
    REFERENCES `blogManagementDB`.`Demographic` (`demographic_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Create Blog`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Create Blog` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Create Blog` (
  `create_blog_id` INT(12) NOT NULL,
  `users_id` INT(12) NOT NULL,
  `blog_id` INT(20) NOT NULL,
  PRIMARY KEY (`create_blog_id`),
  INDEX `CREATE_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  INDEX `CREATE_BLOG_FK_idx` (`blog_id` ASC) VISIBLE,
  CONSTRAINT `CREATE_BLOG_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `CREATE_BLOG_BLOG_FK`
    FOREIGN KEY (`blog_id`)
    REFERENCES `blogManagementDB`.`Blog` (`blog_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Blog Post`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Blog Post` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Blog Post` (
  `blog_post_id` INT(12) NOT NULL,
  `post_id` INT(20) NOT NULL,
  `blog_id` INT(20) NOT NULL,
  PRIMARY KEY (`blog_post_id`),
  INDEX `BLOG_POST_POST_ID_idx` (`post_id` ASC) VISIBLE,
  INDEX `BLOG_POST_BLOG_ID_idx` (`blog_id` ASC) VISIBLE,
  CONSTRAINT `BLOG_POST_POST_FK`
    FOREIGN KEY (`post_id`)
    REFERENCES `blogManagementDB`.`Post` (`post_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `BLOG_POST_BLOG_FK`
    FOREIGN KEY (`blog_id`)
    REFERENCES `blogManagementDB`.`Blog` (`blog_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Ticket`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Ticket` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Ticket` (
  `ticket_id` INT(12) NOT NULL,
  `administrator_id` INT(12) NOT NULL,
  `users_id` INT(12) NOT NULL,
  PRIMARY KEY (`ticket_id`),
  INDEX `TICKET_ADMINISTRATOR_FK_idx` (`administrator_id` ASC) VISIBLE,
  INDEX `TICKET_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  CONSTRAINT `TICKET_ADMINISTRATOR_FK`
    FOREIGN KEY (`administrator_id`)
    REFERENCES `blogManagementDB`.`Administrator` (`administrator_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `TICKET_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Create Post`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Create Post` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Create Post` (
  `create_post_id` INT(12) NOT NULL,
  `users_id` INT(12) NOT NULL,
  `post_id` INT(20) NOT NULL,
  PRIMARY KEY (`create_post_id`),
  INDEX `CREATE_POST_USERS_FK_idx` (`users_id` ASC) VISIBLE,
  INDEX `CREATE_POST_POST_FK_idx` (`post_id` ASC) VISIBLE,
  CONSTRAINT `CREATE_POST_USERS_FK`
    FOREIGN KEY (`users_id`)
    REFERENCES `blogManagementDB`.`Users` (`users_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `CREATE_POST_POST_FK`
    FOREIGN KEY (`post_id`)
    REFERENCES `blogManagementDB`.`Post` (`post_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Stores`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Stores` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Stores` (
  `stores_id` INT(12) NOT NULL,
  `look_up_id` INT(12) NOT NULL,
  `category_id` INT(12) NOT NULL,
  PRIMARY KEY (`stores_id`),
  INDEX `STORES_LOOK_UP_FK_idx` (`look_up_id` ASC) VISIBLE,
  INDEX `STORES_CATEGORY_FK_idx` (`category_id` ASC) VISIBLE,
  CONSTRAINT `STORES_LOOK_UP_FK`
    FOREIGN KEY (`look_up_id`)
    REFERENCES `blogManagementDB`.`Look Up` (`look_up_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `STORES_CATEGORY_FK`
    FOREIGN KEY (`category_id`)
    REFERENCES `blogManagementDB`.`Category` (`category_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Blog Category`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Blog Category` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Blog Category` (
  `blog_category_id` INT(12) NOT NULL,
  `category_id` INT(12) NOT NULL,
  `blog_id` INT(20) NOT NULL,
  PRIMARY KEY (`blog_category_id`),
  INDEX `BLOG_CAT_CAT_FK_idx` (`category_id` ASC) VISIBLE,
  INDEX `BLOG_CAT_BLOG_FK_idx` (`blog_id` ASC) VISIBLE,
  CONSTRAINT `BLOG_CAT_BLOG_FK`
    FOREIGN KEY (`blog_id`)
    REFERENCES `blogManagementDB`.`Blog` (`blog_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `BLOG_CAT_CAT_FK`
    FOREIGN KEY (`category_id`)
    REFERENCES `blogManagementDB`.`Category` (`category_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `blogManagementDB`.`Files`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `blogManagementDB`.`Files` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`Files` (
  `files_id` INT(12) NOT NULL,
  `ticket_id` INT(12) NOT NULL,
  `user_ticket_file_id` INT(12) NOT NULL,
  PRIMARY KEY (`files_id`),
  INDEX `FILES_TICKET_FK_idx` (`ticket_id` ASC) VISIBLE,
  INDEX `FILES_USER_TICKET_FK_idx` (`user_ticket_file_id` ASC) VISIBLE,
  CONSTRAINT `FILES_TICKET_FK`
    FOREIGN KEY (`ticket_id`)
    REFERENCES `blogManagementDB`.`Ticket` (`ticket_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE,
  CONSTRAINT `FILES_USER_TICKET_FK`
    FOREIGN KEY (`user_ticket_file_id`)
    REFERENCES `blogManagementDB`.`User Ticket File` (`user_ticket_file_id`)
    ON DELETE CASCADE
    ON UPDATE CASCADE)
ENGINE = InnoDB;

-- Additional Table Required for Trigger #1. 
DROP TABLE IF EXISTS `blogManagementDB`.`fullnameAudit` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`fullnameAudit` (
	old_users_id INT(12),
    old_full_name VARCHAR(55),
    fullname_change_date DATETIME)
 ENGINE = InnoDB;   
 
 -- Additional Table Required for Trigger #2. 
 DROP TABLE IF EXISTS `blogManagementDB`.`usernameAudit` ;

CREATE TABLE IF NOT EXISTS `blogManagementDB`.`usernameAudit` (
	old_account_id INT(12),
    old_username VARCHAR(55),
    old_password VARCHAR(55),
    username_change_date DATETIME)
 ENGINE = InnoDB;   

-- Triggers --------------------------------------------------------------
-- 1. Create an audit trigger that stores the old first and last name together whenever a User changes their first or last name.
DROP TRIGGER IF EXISTS users_name_change
DELIMITER $$

CREATE TRIGGER users_name_change
AFTER UPDATE 
ON Users FOR EACH ROW 
BEGIN
	DECLARE trigg_full_name VARCHAR(85);
	IF (OLD.first_name <> NEW.first_name OR OLD.last_name <> NEW.last_name) THEN
		SET trigg_full_name = concat_name(OLD.first_name, OLD.last_name);
		INSERT INTO fullnameAudit(old_users_id, old_full_name, fullname_change_date)
        VALUES(OLD.users_id, trigg_full_name, NOW());
	END IF;
END$$

DELIMITER ;

-- 2. Create an audit trigger that stores the old username whenever a User changes their account username.
DROP TRIGGER IF EXISTS account_username_change
DELIMITER $$

CREATE TRIGGER account_username_change
AFTER UPDATE 
ON `Account` FOR EACH ROW 
BEGIN
	IF OLD.username <> NEW.username THEN
		INSERT INTO usernameAudit(old_account_id, old_username, username_change_date)
        VALUES(OLD.account_id, OLD.username, NOW());
	END IF;
END$$

DELIMITER ;

-- Function --------------------------------------------------------------
-- 1. Create a function that adds the Users first and last name together when the trigger users_name_change is invoked.
DROP FUNCTION IF EXISTS concat_name;
DELIMITER $$

CREATE FUNCTION concat_name (

	func_first_name VARCHAR(55),
    func_last_name VARCHAR(55)
)
RETURNS VARCHAR(255)
DETERMINISTIC
BEGIN
		RETURN CONCAT(func_first_name, ' ', func_last_name);
END $$

DELIMITER ;
-- Procedure --------------------------------------------------------------
-- 1. Create a procedure that returns all current usernames and passwords (This procedure is called in inserts).
DROP PROCEDURE IF EXISTS get_passwords;
DELIMITER $$

CREATE PROCEDURE get_passwords()
BEGIN
	SELECT 
    a.username
    ,a.password
    FROM Account a;
END $$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;